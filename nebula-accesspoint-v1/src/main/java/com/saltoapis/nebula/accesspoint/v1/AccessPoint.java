// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: salto/nebula/accesspoint/v1/access_point.proto

// Protobuf Java Version: 3.25.1
package com.saltoapis.nebula.accesspoint.v1;

/**
 * <pre>
 * The access point object
 * </pre>
 *
 * Protobuf type {@code salto.nebula.accesspoint.v1.AccessPoint}
 */
public  final class AccessPoint extends
    com.google.protobuf.GeneratedMessageLite<
        AccessPoint, AccessPoint.Builder> implements
    // @@protoc_insertion_point(message_implements:salto.nebula.accesspoint.v1.AccessPoint)
    AccessPointOrBuilder {
  private AccessPoint() {
    name_ = "";
    displayName_ = "";
    calendar_ = "";
  }
  private int bitField0_;
  private int openingModeCase_ = 0;
  private java.lang.Object openingMode_;
  public enum OpeningModeCase {
    FIXED(3),
    SCHEDULE(4),
    OPENINGMODE_NOT_SET(0);
    private final int value;
    private OpeningModeCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OpeningModeCase valueOf(int value) {
      return forNumber(value);
    }

    public static OpeningModeCase forNumber(int value) {
      switch (value) {
        case 3: return FIXED;
        case 4: return SCHEDULE;
        case 0: return OPENINGMODE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public OpeningModeCase
  getOpeningModeCase() {
    return OpeningModeCase.forNumber(
        openingModeCase_);
  }

  private void clearOpeningMode() {
    openingModeCase_ = 0;
    openingMode_ = null;
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   * <pre>
   *  Resource name of the access point. It must have the format
   * `installations/&#42;&#47;access-points/&#42;`. For example:
   * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   *  Resource name of the access point. It must have the format
   * `installations/&#42;&#47;access-points/&#42;`. For example:
   * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   *  Resource name of the access point. It must have the format
   * `installations/&#42;&#47;access-points/&#42;`. For example:
   * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The name to set.
   */
  private void setName(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    name_ = value;
  }
  /**
   * <pre>
   *  Resource name of the access point. It must have the format
   * `installations/&#42;&#47;access-points/&#42;`. For example:
   * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  private void clearName() {

    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   *  Resource name of the access point. It must have the format
   * `installations/&#42;&#47;access-points/&#42;`. For example:
   * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The bytes for name to set.
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    name_ = value.toStringUtf8();

  }

  public static final int DISPLAY_NAME_FIELD_NUMBER = 2;
  private java.lang.String displayName_;
  /**
   * <pre>
   * Display name of the access point.
   * </pre>
   *
   * <code>string display_name = 2;</code>
   * @return The displayName.
   */
  @java.lang.Override
  public java.lang.String getDisplayName() {
    return displayName_;
  }
  /**
   * <pre>
   * Display name of the access point.
   * </pre>
   *
   * <code>string display_name = 2;</code>
   * @return The bytes for displayName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDisplayNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(displayName_);
  }
  /**
   * <pre>
   * Display name of the access point.
   * </pre>
   *
   * <code>string display_name = 2;</code>
   * @param value The displayName to set.
   */
  private void setDisplayName(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    displayName_ = value;
  }
  /**
   * <pre>
   * Display name of the access point.
   * </pre>
   *
   * <code>string display_name = 2;</code>
   */
  private void clearDisplayName() {

    displayName_ = getDefaultInstance().getDisplayName();
  }
  /**
   * <pre>
   * Display name of the access point.
   * </pre>
   *
   * <code>string display_name = 2;</code>
   * @param value The bytes for displayName to set.
   */
  private void setDisplayNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    displayName_ = value.toStringUtf8();

  }

  public static final int FIXED_FIELD_NUMBER = 3;
  /**
   * <pre>
   * The opening mode to be used permanently.
   * </pre>
   *
   * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
   * @return Whether the fixed field is set.
   */
  @java.lang.Override
  public boolean hasFixed() {
    return openingModeCase_ == 3;
  }
  /**
   * <pre>
   * The opening mode to be used permanently.
   * </pre>
   *
   * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
   * @return The enum numeric value on the wire for fixed.
   */
  @java.lang.Override
  public int getFixedValue() {
    if (openingModeCase_ == 3) {
      return (java.lang.Integer) openingMode_;
    }
    return 0;
  }
  /**
   * <pre>
   * The opening mode to be used permanently.
   * </pre>
   *
   * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
   * @return The fixed.
   */
  @java.lang.Override
  public com.saltoapis.nebula.type.OpeningMode getFixed() {
    if (openingModeCase_ == 3) {
      com.saltoapis.nebula.type.OpeningMode result = com.saltoapis.nebula.type.OpeningMode.forNumber((java.lang.Integer) openingMode_);
      return result == null ? com.saltoapis.nebula.type.OpeningMode.UNRECOGNIZED : result;
    }
    return com.saltoapis.nebula.type.OpeningMode.OPENING_MODE_UNSPECIFIED;
  }
  /**
   * <pre>
   * The opening mode to be used permanently.
   * </pre>
   *
   * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
   * @param value The enum numeric value on the wire for fixed to set.
   */
  private void setFixedValue(int value) {
    openingModeCase_ = 3;
    openingMode_ = value;
  }
  /**
   * <pre>
   * The opening mode to be used permanently.
   * </pre>
   *
   * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
   * @param value The fixed to set.
   */
  private void setFixed(com.saltoapis.nebula.type.OpeningMode value) {
    openingMode_ = value.getNumber();
    openingModeCase_ = 3;
  }
  /**
   * <pre>
   * The opening mode to be used permanently.
   * </pre>
   *
   * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
   */
  private void clearFixed() {
    if (openingModeCase_ == 3) {
      openingModeCase_ = 0;
      openingMode_ = null;
    }
  }

  public static final int SCHEDULE_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Reference to an opening mode schedule
   * </pre>
   *
   * <code>string schedule = 4;</code>
   * @return Whether the schedule field is set.
   */
  @java.lang.Override
  public boolean hasSchedule() {
    return openingModeCase_ == 4;
  }
  /**
   * <pre>
   * Reference to an opening mode schedule
   * </pre>
   *
   * <code>string schedule = 4;</code>
   * @return The schedule.
   */
  @java.lang.Override
  public java.lang.String getSchedule() {
    java.lang.String ref = "";
    if (openingModeCase_ == 4) {
      ref = (java.lang.String) openingMode_;
    }
    return ref;
  }
  /**
   * <pre>
   * Reference to an opening mode schedule
   * </pre>
   *
   * <code>string schedule = 4;</code>
   * @return The bytes for schedule.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getScheduleBytes() {
    java.lang.String ref = "";
    if (openingModeCase_ == 4) {
      ref = (java.lang.String) openingMode_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   * <pre>
   * Reference to an opening mode schedule
   * </pre>
   *
   * <code>string schedule = 4;</code>
   * @param value The schedule to set.
   */
  private void setSchedule(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  openingModeCase_ = 4;
    openingMode_ = value;
  }
  /**
   * <pre>
   * Reference to an opening mode schedule
   * </pre>
   *
   * <code>string schedule = 4;</code>
   */
  private void clearSchedule() {
    if (openingModeCase_ == 4) {
      openingModeCase_ = 0;
      openingMode_ = null;
    }
  }
  /**
   * <pre>
   * Reference to an opening mode schedule
   * </pre>
   *
   * <code>string schedule = 4;</code>
   * @param value The bytes for schedule to set.
   */
  private void setScheduleBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    openingMode_ = value.toStringUtf8();
    openingModeCase_ = 4;
  }

  public static final int CALENDAR_FIELD_NUMBER = 5;
  private java.lang.String calendar_;
  /**
   * <pre>
   * Calendar reference assigned to this access point.
   * If not set, a calendar where all days are NORMAL will be used.
   * That's to say a regular calendar that doesn't have any
   * HOLIDAY or OTHER days added to it.
   * </pre>
   *
   * <code>optional string calendar = 5;</code>
   * @return Whether the calendar field is set.
   */
  @java.lang.Override
  public boolean hasCalendar() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Calendar reference assigned to this access point.
   * If not set, a calendar where all days are NORMAL will be used.
   * That's to say a regular calendar that doesn't have any
   * HOLIDAY or OTHER days added to it.
   * </pre>
   *
   * <code>optional string calendar = 5;</code>
   * @return The calendar.
   */
  @java.lang.Override
  public java.lang.String getCalendar() {
    return calendar_;
  }
  /**
   * <pre>
   * Calendar reference assigned to this access point.
   * If not set, a calendar where all days are NORMAL will be used.
   * That's to say a regular calendar that doesn't have any
   * HOLIDAY or OTHER days added to it.
   * </pre>
   *
   * <code>optional string calendar = 5;</code>
   * @return The bytes for calendar.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCalendarBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(calendar_);
  }
  /**
   * <pre>
   * Calendar reference assigned to this access point.
   * If not set, a calendar where all days are NORMAL will be used.
   * That's to say a regular calendar that doesn't have any
   * HOLIDAY or OTHER days added to it.
   * </pre>
   *
   * <code>optional string calendar = 5;</code>
   * @param value The calendar to set.
   */
  private void setCalendar(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  bitField0_ |= 0x00000001;
    calendar_ = value;
  }
  /**
   * <pre>
   * Calendar reference assigned to this access point.
   * If not set, a calendar where all days are NORMAL will be used.
   * That's to say a regular calendar that doesn't have any
   * HOLIDAY or OTHER days added to it.
   * </pre>
   *
   * <code>optional string calendar = 5;</code>
   */
  private void clearCalendar() {
    bitField0_ = (bitField0_ & ~0x00000001);
    calendar_ = getDefaultInstance().getCalendar();
  }
  /**
   * <pre>
   * Calendar reference assigned to this access point.
   * If not set, a calendar where all days are NORMAL will be used.
   * That's to say a regular calendar that doesn't have any
   * HOLIDAY or OTHER days added to it.
   * </pre>
   *
   * <code>optional string calendar = 5;</code>
   * @param value The bytes for calendar to set.
   */
  private void setCalendarBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    calendar_ = value.toStringUtf8();
    bitField0_ |= 0x00000001;
  }

  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.saltoapis.nebula.accesspoint.v1.AccessPoint prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * The access point object
   * </pre>
   *
   * Protobuf type {@code salto.nebula.accesspoint.v1.AccessPoint}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.saltoapis.nebula.accesspoint.v1.AccessPoint, Builder> implements
      // @@protoc_insertion_point(builder_implements:salto.nebula.accesspoint.v1.AccessPoint)
      com.saltoapis.nebula.accesspoint.v1.AccessPointOrBuilder {
    // Construct using com.saltoapis.nebula.accesspoint.v1.AccessPoint.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public OpeningModeCase
        getOpeningModeCase() {
      return instance.getOpeningModeCase();
    }

    public Builder clearOpeningMode() {
      copyOnWrite();
      instance.clearOpeningMode();
      return this;
    }


    /**
     * <pre>
     *  Resource name of the access point. It must have the format
     * `installations/&#42;&#47;access-points/&#42;`. For example:
     * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     *  Resource name of the access point. It must have the format
     * `installations/&#42;&#47;access-points/&#42;`. For example:
     * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     *  Resource name of the access point. It must have the format
     * `installations/&#42;&#47;access-points/&#42;`. For example:
     * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     *  Resource name of the access point. It must have the format
     * `installations/&#42;&#47;access-points/&#42;`. For example:
     * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     *  Resource name of the access point. It must have the format
     * `installations/&#42;&#47;access-points/&#42;`. For example:
     * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * Display name of the access point.
     * </pre>
     *
     * <code>string display_name = 2;</code>
     * @return The displayName.
     */
    @java.lang.Override
    public java.lang.String getDisplayName() {
      return instance.getDisplayName();
    }
    /**
     * <pre>
     * Display name of the access point.
     * </pre>
     *
     * <code>string display_name = 2;</code>
     * @return The bytes for displayName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      return instance.getDisplayNameBytes();
    }
    /**
     * <pre>
     * Display name of the access point.
     * </pre>
     *
     * <code>string display_name = 2;</code>
     * @param value The displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayName(
        java.lang.String value) {
      copyOnWrite();
      instance.setDisplayName(value);
      return this;
    }
    /**
     * <pre>
     * Display name of the access point.
     * </pre>
     *
     * <code>string display_name = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisplayName() {
      copyOnWrite();
      instance.clearDisplayName();
      return this;
    }
    /**
     * <pre>
     * Display name of the access point.
     * </pre>
     *
     * <code>string display_name = 2;</code>
     * @param value The bytes for displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDisplayNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * The opening mode to be used permanently.
     * </pre>
     *
     * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
     * @return Whether the fixed field is set.
     */
    @java.lang.Override
    public boolean hasFixed() {
      return instance.hasFixed();
    }
    /**
     * <pre>
     * The opening mode to be used permanently.
     * </pre>
     *
     * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
     * @return The enum numeric value on the wire for fixed.
     */
    @java.lang.Override
    public int getFixedValue() {
      return instance.getFixedValue();
    }
    /**
     * <pre>
     * The opening mode to be used permanently.
     * </pre>
     *
     * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
     * @param value The enum numeric value on the wire for fixed to set.
     * @return This builder for chaining.
     */
    public Builder setFixedValue(int value) {
      copyOnWrite();
      instance.setFixedValue(value);
      return this;
    }
    /**
     * <pre>
     * The opening mode to be used permanently.
     * </pre>
     *
     * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
     * @return The fixed.
     */
    @java.lang.Override
    public com.saltoapis.nebula.type.OpeningMode getFixed() {
      return instance.getFixed();
    }
    /**
     * <pre>
     * The opening mode to be used permanently.
     * </pre>
     *
     * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
     * @param value The fixed to set.
     * @return This builder for chaining.
     */
    public Builder setFixed(com.saltoapis.nebula.type.OpeningMode value) {
      copyOnWrite();
      instance.setFixed(value);
      return this;
    }
    /**
     * <pre>
     * The opening mode to be used permanently.
     * </pre>
     *
     * <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearFixed() {
      copyOnWrite();
      instance.clearFixed();
      return this;
    }

    /**
     * <pre>
     * Reference to an opening mode schedule
     * </pre>
     *
     * <code>string schedule = 4;</code>
     * @return Whether the schedule field is set.
     */
    @java.lang.Override
    public boolean hasSchedule() {
      return instance.hasSchedule();
    }
    /**
     * <pre>
     * Reference to an opening mode schedule
     * </pre>
     *
     * <code>string schedule = 4;</code>
     * @return The schedule.
     */
    @java.lang.Override
    public java.lang.String getSchedule() {
      return instance.getSchedule();
    }
    /**
     * <pre>
     * Reference to an opening mode schedule
     * </pre>
     *
     * <code>string schedule = 4;</code>
     * @return The bytes for schedule.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getScheduleBytes() {
      return instance.getScheduleBytes();
    }
    /**
     * <pre>
     * Reference to an opening mode schedule
     * </pre>
     *
     * <code>string schedule = 4;</code>
     * @param value The schedule to set.
     * @return This builder for chaining.
     */
    public Builder setSchedule(
        java.lang.String value) {
      copyOnWrite();
      instance.setSchedule(value);
      return this;
    }
    /**
     * <pre>
     * Reference to an opening mode schedule
     * </pre>
     *
     * <code>string schedule = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearSchedule() {
      copyOnWrite();
      instance.clearSchedule();
      return this;
    }
    /**
     * <pre>
     * Reference to an opening mode schedule
     * </pre>
     *
     * <code>string schedule = 4;</code>
     * @param value The bytes for schedule to set.
     * @return This builder for chaining.
     */
    public Builder setScheduleBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setScheduleBytes(value);
      return this;
    }

    /**
     * <pre>
     * Calendar reference assigned to this access point.
     * If not set, a calendar where all days are NORMAL will be used.
     * That's to say a regular calendar that doesn't have any
     * HOLIDAY or OTHER days added to it.
     * </pre>
     *
     * <code>optional string calendar = 5;</code>
     * @return Whether the calendar field is set.
     */
    @java.lang.Override
    public boolean hasCalendar() {
      return instance.hasCalendar();
    }
    /**
     * <pre>
     * Calendar reference assigned to this access point.
     * If not set, a calendar where all days are NORMAL will be used.
     * That's to say a regular calendar that doesn't have any
     * HOLIDAY or OTHER days added to it.
     * </pre>
     *
     * <code>optional string calendar = 5;</code>
     * @return The calendar.
     */
    @java.lang.Override
    public java.lang.String getCalendar() {
      return instance.getCalendar();
    }
    /**
     * <pre>
     * Calendar reference assigned to this access point.
     * If not set, a calendar where all days are NORMAL will be used.
     * That's to say a regular calendar that doesn't have any
     * HOLIDAY or OTHER days added to it.
     * </pre>
     *
     * <code>optional string calendar = 5;</code>
     * @return The bytes for calendar.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCalendarBytes() {
      return instance.getCalendarBytes();
    }
    /**
     * <pre>
     * Calendar reference assigned to this access point.
     * If not set, a calendar where all days are NORMAL will be used.
     * That's to say a regular calendar that doesn't have any
     * HOLIDAY or OTHER days added to it.
     * </pre>
     *
     * <code>optional string calendar = 5;</code>
     * @param value The calendar to set.
     * @return This builder for chaining.
     */
    public Builder setCalendar(
        java.lang.String value) {
      copyOnWrite();
      instance.setCalendar(value);
      return this;
    }
    /**
     * <pre>
     * Calendar reference assigned to this access point.
     * If not set, a calendar where all days are NORMAL will be used.
     * That's to say a regular calendar that doesn't have any
     * HOLIDAY or OTHER days added to it.
     * </pre>
     *
     * <code>optional string calendar = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearCalendar() {
      copyOnWrite();
      instance.clearCalendar();
      return this;
    }
    /**
     * <pre>
     * Calendar reference assigned to this access point.
     * If not set, a calendar where all days are NORMAL will be used.
     * That's to say a regular calendar that doesn't have any
     * HOLIDAY or OTHER days added to it.
     * </pre>
     *
     * <code>optional string calendar = 5;</code>
     * @param value The bytes for calendar to set.
     * @return This builder for chaining.
     */
    public Builder setCalendarBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCalendarBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:salto.nebula.accesspoint.v1.AccessPoint)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.saltoapis.nebula.accesspoint.v1.AccessPoint();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "openingMode_",
            "openingModeCase_",
            "bitField0_",
            "name_",
            "displayName_",
            "calendar_",
          };
          java.lang.String info =
              "\u0000\u0005\u0001\u0001\u0001\u0005\u0005\u0000\u0000\u0000\u0001\u0208\u0002\u0208" +
              "\u0003?\u0000\u0004\u023b\u0000\u0005\u1208\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.saltoapis.nebula.accesspoint.v1.AccessPoint> parser = PARSER;
        if (parser == null) {
          synchronized (com.saltoapis.nebula.accesspoint.v1.AccessPoint.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.saltoapis.nebula.accesspoint.v1.AccessPoint>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:salto.nebula.accesspoint.v1.AccessPoint)
  private static final com.saltoapis.nebula.accesspoint.v1.AccessPoint DEFAULT_INSTANCE;
  static {
    AccessPoint defaultInstance = new AccessPoint();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      AccessPoint.class, defaultInstance);
  }

  public static com.saltoapis.nebula.accesspoint.v1.AccessPoint getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<AccessPoint> PARSER;

  public static com.google.protobuf.Parser<AccessPoint> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

