// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: salto/nebula/type/device_type.proto

// Protobuf Java Version: 4.26.1
package com.saltoapis.nebula.type;

/**
 * <pre>
 * Represents the device types.
 * </pre>
 *
 * Protobuf enum {@code salto.nebula.type.DeviceType}
 */
public enum DeviceType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Unspecified
   * </pre>
   *
   * <code>DEVICE_TYPE_UNSPECIFIED = 0;</code>
   */
  DEVICE_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * Electronic lock
   * </pre>
   *
   * <code>ELECTRONIC_LOCK = 1;</code>
   */
  ELECTRONIC_LOCK(1),
  /**
   * <pre>
   * Gateway
   * </pre>
   *
   * <code>GATEWAY = 2;</code>
   */
  GATEWAY(2),
  /**
   * <pre>
   * Extender
   * </pre>
   *
   * <code>EXTENDER = 3;</code>
   */
  EXTENDER(3),
  /**
   * <pre>
   * Encoder
   * </pre>
   *
   * <code>ENCODER = 4;</code>
   */
  ENCODER(4),
  /**
   * <pre>
   * Controller
   * </pre>
   *
   * <code>CONTROLLER = 5;</code>
   */
  CONTROLLER(5),
  /**
   * <pre>
   * Intercom Adaptor
   * </pre>
   *
   * <code>INTERCOM_ADAPTOR = 6;</code>
   */
  INTERCOM_ADAPTOR(6),
  /**
   * <pre>
   * Electronic key
   * </pre>
   *
   * <code>ELECTRONIC_KEY = 7;</code>
   */
  ELECTRONIC_KEY(7),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      DeviceType.class.getName());
  }
  /**
   * <pre>
   * Unspecified
   * </pre>
   *
   * <code>DEVICE_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int DEVICE_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Electronic lock
   * </pre>
   *
   * <code>ELECTRONIC_LOCK = 1;</code>
   */
  public static final int ELECTRONIC_LOCK_VALUE = 1;
  /**
   * <pre>
   * Gateway
   * </pre>
   *
   * <code>GATEWAY = 2;</code>
   */
  public static final int GATEWAY_VALUE = 2;
  /**
   * <pre>
   * Extender
   * </pre>
   *
   * <code>EXTENDER = 3;</code>
   */
  public static final int EXTENDER_VALUE = 3;
  /**
   * <pre>
   * Encoder
   * </pre>
   *
   * <code>ENCODER = 4;</code>
   */
  public static final int ENCODER_VALUE = 4;
  /**
   * <pre>
   * Controller
   * </pre>
   *
   * <code>CONTROLLER = 5;</code>
   */
  public static final int CONTROLLER_VALUE = 5;
  /**
   * <pre>
   * Intercom Adaptor
   * </pre>
   *
   * <code>INTERCOM_ADAPTOR = 6;</code>
   */
  public static final int INTERCOM_ADAPTOR_VALUE = 6;
  /**
   * <pre>
   * Electronic key
   * </pre>
   *
   * <code>ELECTRONIC_KEY = 7;</code>
   */
  public static final int ELECTRONIC_KEY_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static DeviceType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static DeviceType forNumber(int value) {
    switch (value) {
      case 0: return DEVICE_TYPE_UNSPECIFIED;
      case 1: return ELECTRONIC_LOCK;
      case 2: return GATEWAY;
      case 3: return EXTENDER;
      case 4: return ENCODER;
      case 5: return CONTROLLER;
      case 6: return INTERCOM_ADAPTOR;
      case 7: return ELECTRONIC_KEY;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<DeviceType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      DeviceType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<DeviceType>() {
          public DeviceType findValueByNumber(int number) {
            return DeviceType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.saltoapis.nebula.type.DeviceTypeProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final DeviceType[] VALUES = values();

  public static DeviceType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private DeviceType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:salto.nebula.type.DeviceType)
}

