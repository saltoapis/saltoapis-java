// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: salto/nebula/type/device_metadata.proto
// Protobuf Java Version: 4.29.2

package com.saltoapis.nebula.type;

/**
 * <pre>
 * Metadata contains information about a device. Most metadata is immutable.
 * </pre>
 *
 * Protobuf type {@code salto.nebula.type.DeviceMetadata}
 */
public final class DeviceMetadata extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:salto.nebula.type.DeviceMetadata)
    DeviceMetadataOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 2,
      /* suffix= */ "",
      DeviceMetadata.class.getName());
  }
  // Use DeviceMetadata.newBuilder() to construct.
  private DeviceMetadata(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private DeviceMetadata() {
    circuitBoards_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.saltoapis.nebula.type.DeviceMetadata.class, com.saltoapis.nebula.type.DeviceMetadata.Builder.class);
  }

  public interface CircuitBoardOrBuilder extends
      // @@protoc_insertion_point(interface_extends:salto.nebula.type.DeviceMetadata.CircuitBoard)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Date manufactured
     * </pre>
     *
     * <code>.salto.type.Date manufacture_date = 2;</code>
     * @return Whether the manufactureDate field is set.
     */
    boolean hasManufactureDate();
    /**
     * <pre>
     * Date manufactured
     * </pre>
     *
     * <code>.salto.type.Date manufacture_date = 2;</code>
     * @return The manufactureDate.
     */
    com.saltoapis.type.Date getManufactureDate();
    /**
     * <pre>
     * Date manufactured
     * </pre>
     *
     * <code>.salto.type.Date manufacture_date = 2;</code>
     */
    com.saltoapis.type.DateOrBuilder getManufactureDateOrBuilder();

    /**
     * <pre>
     * Hardware serial number, for example, `2.000.0020`
     * </pre>
     *
     * <code>string serial_number = 3;</code>
     * @return The serialNumber.
     */
    java.lang.String getSerialNumber();
    /**
     * <pre>
     * Hardware serial number, for example, `2.000.0020`
     * </pre>
     *
     * <code>string serial_number = 3;</code>
     * @return The bytes for serialNumber.
     */
    com.google.protobuf.ByteString
        getSerialNumberBytes();

    /**
     * <pre>
     * Firmwares present in this circuit board.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
     */
    java.util.List<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware> 
        getFirmwaresList();
    /**
     * <pre>
     * Firmwares present in this circuit board.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
     */
    com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware getFirmwares(int index);
    /**
     * <pre>
     * Firmwares present in this circuit board.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
     */
    int getFirmwaresCount();
    /**
     * <pre>
     * Firmwares present in this circuit board.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
     */
    java.util.List<? extends com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.FirmwareOrBuilder> 
        getFirmwaresOrBuilderList();
    /**
     * <pre>
     * Firmwares present in this circuit board.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
     */
    com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.FirmwareOrBuilder getFirmwaresOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Metadata of a circuit board present on a device.
   * </pre>
   *
   * Protobuf type {@code salto.nebula.type.DeviceMetadata.CircuitBoard}
   */
  public static final class CircuitBoard extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:salto.nebula.type.DeviceMetadata.CircuitBoard)
      CircuitBoardOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 2,
        /* suffix= */ "",
        CircuitBoard.class.getName());
    }
    // Use CircuitBoard.newBuilder() to construct.
    private CircuitBoard(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CircuitBoard() {
      serialNumber_ = "";
      firmwares_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_CircuitBoard_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_CircuitBoard_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.class, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder.class);
    }

    public interface FirmwareOrBuilder extends
        // @@protoc_insertion_point(interface_extends:salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Firmware number, for example '0180'.
       * </pre>
       *
       * <code>string number = 1;</code>
       * @return The number.
       */
      java.lang.String getNumber();
      /**
       * <pre>
       * Firmware number, for example '0180'.
       * </pre>
       *
       * <code>string number = 1;</code>
       * @return The bytes for number.
       */
      com.google.protobuf.ByteString
          getNumberBytes();

      /**
       * <pre>
       * Firmware version of a specific firmware number.
       * </pre>
       *
       * <code>string version = 2;</code>
       * @return The version.
       */
      java.lang.String getVersion();
      /**
       * <pre>
       * Firmware version of a specific firmware number.
       * </pre>
       *
       * <code>string version = 2;</code>
       * @return The bytes for version.
       */
      com.google.protobuf.ByteString
          getVersionBytes();
    }
    /**
     * <pre>
     * Firmware contains the firmware number and version.
     * </pre>
     *
     * Protobuf type {@code salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware}
     */
    public static final class Firmware extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware)
        FirmwareOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 2,
          /* suffix= */ "",
          Firmware.class.getName());
      }
      // Use Firmware.newBuilder() to construct.
      private Firmware(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Firmware() {
        number_ = "";
        version_ = "";
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_CircuitBoard_Firmware_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_CircuitBoard_Firmware_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.class, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder.class);
      }

      public static final int NUMBER_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object number_ = "";
      /**
       * <pre>
       * Firmware number, for example '0180'.
       * </pre>
       *
       * <code>string number = 1;</code>
       * @return The number.
       */
      @java.lang.Override
      public java.lang.String getNumber() {
        java.lang.Object ref = number_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          number_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * Firmware number, for example '0180'.
       * </pre>
       *
       * <code>string number = 1;</code>
       * @return The bytes for number.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNumberBytes() {
        java.lang.Object ref = number_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          number_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VERSION_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private volatile java.lang.Object version_ = "";
      /**
       * <pre>
       * Firmware version of a specific firmware number.
       * </pre>
       *
       * <code>string version = 2;</code>
       * @return The version.
       */
      @java.lang.Override
      public java.lang.String getVersion() {
        java.lang.Object ref = version_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          version_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * Firmware version of a specific firmware number.
       * </pre>
       *
       * <code>string version = 2;</code>
       * @return The bytes for version.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getVersionBytes() {
        java.lang.Object ref = version_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          version_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(number_)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 1, number_);
        }
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(version_)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 2, version_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(number_)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(1, number_);
        }
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(version_)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(2, version_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware)) {
          return super.equals(obj);
        }
        com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware other = (com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware) obj;

        if (!getNumber()
            .equals(other.getNumber())) return false;
        if (!getVersion()
            .equals(other.getVersion())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NUMBER_FIELD_NUMBER;
        hash = (53 * hash) + getNumber().hashCode();
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion().hashCode();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Firmware contains the firmware number and version.
       * </pre>
       *
       * Protobuf type {@code salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware)
          com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.FirmwareOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_CircuitBoard_Firmware_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_CircuitBoard_Firmware_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.class, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder.class);
        }

        // Construct using com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          number_ = "";
          version_ = "";
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_CircuitBoard_Firmware_descriptor;
        }

        @java.lang.Override
        public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware getDefaultInstanceForType() {
          return com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.getDefaultInstance();
        }

        @java.lang.Override
        public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware build() {
          com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware buildPartial() {
          com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware result = new com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware result) {
          int from_bitField0_ = bitField0_;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.number_ = number_;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.version_ = version_;
          }
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware) {
            return mergeFrom((com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware other) {
          if (other == com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.getDefaultInstance()) return this;
          if (!other.getNumber().isEmpty()) {
            number_ = other.number_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          if (!other.getVersion().isEmpty()) {
            version_ = other.version_;
            bitField0_ |= 0x00000002;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  number_ = input.readStringRequireUtf8();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  version_ = input.readStringRequireUtf8();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object number_ = "";
        /**
         * <pre>
         * Firmware number, for example '0180'.
         * </pre>
         *
         * <code>string number = 1;</code>
         * @return The number.
         */
        public java.lang.String getNumber() {
          java.lang.Object ref = number_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            number_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Firmware number, for example '0180'.
         * </pre>
         *
         * <code>string number = 1;</code>
         * @return The bytes for number.
         */
        public com.google.protobuf.ByteString
            getNumberBytes() {
          java.lang.Object ref = number_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            number_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Firmware number, for example '0180'.
         * </pre>
         *
         * <code>string number = 1;</code>
         * @param value The number to set.
         * @return This builder for chaining.
         */
        public Builder setNumber(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          number_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Firmware number, for example '0180'.
         * </pre>
         *
         * <code>string number = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumber() {
          number_ = getDefaultInstance().getNumber();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Firmware number, for example '0180'.
         * </pre>
         *
         * <code>string number = 1;</code>
         * @param value The bytes for number to set.
         * @return This builder for chaining.
         */
        public Builder setNumberBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          checkByteStringIsUtf8(value);
          number_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        private java.lang.Object version_ = "";
        /**
         * <pre>
         * Firmware version of a specific firmware number.
         * </pre>
         *
         * <code>string version = 2;</code>
         * @return The version.
         */
        public java.lang.String getVersion() {
          java.lang.Object ref = version_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            version_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Firmware version of a specific firmware number.
         * </pre>
         *
         * <code>string version = 2;</code>
         * @return The bytes for version.
         */
        public com.google.protobuf.ByteString
            getVersionBytes() {
          java.lang.Object ref = version_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            version_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Firmware version of a specific firmware number.
         * </pre>
         *
         * <code>string version = 2;</code>
         * @param value The version to set.
         * @return This builder for chaining.
         */
        public Builder setVersion(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          version_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Firmware version of a specific firmware number.
         * </pre>
         *
         * <code>string version = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearVersion() {
          version_ = getDefaultInstance().getVersion();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Firmware version of a specific firmware number.
         * </pre>
         *
         * <code>string version = 2;</code>
         * @param value The bytes for version to set.
         * @return This builder for chaining.
         */
        public Builder setVersionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          checkByteStringIsUtf8(value);
          version_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware)
      }

      // @@protoc_insertion_point(class_scope:salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware)
      private static final com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware();
      }

      public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Firmware>
          PARSER = new com.google.protobuf.AbstractParser<Firmware>() {
        @java.lang.Override
        public Firmware parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Firmware> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Firmware> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int MANUFACTURE_DATE_FIELD_NUMBER = 2;
    private com.saltoapis.type.Date manufactureDate_;
    /**
     * <pre>
     * Date manufactured
     * </pre>
     *
     * <code>.salto.type.Date manufacture_date = 2;</code>
     * @return Whether the manufactureDate field is set.
     */
    @java.lang.Override
    public boolean hasManufactureDate() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Date manufactured
     * </pre>
     *
     * <code>.salto.type.Date manufacture_date = 2;</code>
     * @return The manufactureDate.
     */
    @java.lang.Override
    public com.saltoapis.type.Date getManufactureDate() {
      return manufactureDate_ == null ? com.saltoapis.type.Date.getDefaultInstance() : manufactureDate_;
    }
    /**
     * <pre>
     * Date manufactured
     * </pre>
     *
     * <code>.salto.type.Date manufacture_date = 2;</code>
     */
    @java.lang.Override
    public com.saltoapis.type.DateOrBuilder getManufactureDateOrBuilder() {
      return manufactureDate_ == null ? com.saltoapis.type.Date.getDefaultInstance() : manufactureDate_;
    }

    public static final int SERIAL_NUMBER_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object serialNumber_ = "";
    /**
     * <pre>
     * Hardware serial number, for example, `2.000.0020`
     * </pre>
     *
     * <code>string serial_number = 3;</code>
     * @return The serialNumber.
     */
    @java.lang.Override
    public java.lang.String getSerialNumber() {
      java.lang.Object ref = serialNumber_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        serialNumber_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Hardware serial number, for example, `2.000.0020`
     * </pre>
     *
     * <code>string serial_number = 3;</code>
     * @return The bytes for serialNumber.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSerialNumberBytes() {
      java.lang.Object ref = serialNumber_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        serialNumber_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FIRMWARES_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware> firmwares_;
    /**
     * <pre>
     * Firmwares present in this circuit board.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
     */
    @java.lang.Override
    public java.util.List<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware> getFirmwaresList() {
      return firmwares_;
    }
    /**
     * <pre>
     * Firmwares present in this circuit board.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.FirmwareOrBuilder> 
        getFirmwaresOrBuilderList() {
      return firmwares_;
    }
    /**
     * <pre>
     * Firmwares present in this circuit board.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
     */
    @java.lang.Override
    public int getFirmwaresCount() {
      return firmwares_.size();
    }
    /**
     * <pre>
     * Firmwares present in this circuit board.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
     */
    @java.lang.Override
    public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware getFirmwares(int index) {
      return firmwares_.get(index);
    }
    /**
     * <pre>
     * Firmwares present in this circuit board.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
     */
    @java.lang.Override
    public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.FirmwareOrBuilder getFirmwaresOrBuilder(
        int index) {
      return firmwares_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getManufactureDate());
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(serialNumber_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, serialNumber_);
      }
      for (int i = 0; i < firmwares_.size(); i++) {
        output.writeMessage(4, firmwares_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getManufactureDate());
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(serialNumber_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, serialNumber_);
      }
      for (int i = 0; i < firmwares_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, firmwares_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard)) {
        return super.equals(obj);
      }
      com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard other = (com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard) obj;

      if (hasManufactureDate() != other.hasManufactureDate()) return false;
      if (hasManufactureDate()) {
        if (!getManufactureDate()
            .equals(other.getManufactureDate())) return false;
      }
      if (!getSerialNumber()
          .equals(other.getSerialNumber())) return false;
      if (!getFirmwaresList()
          .equals(other.getFirmwaresList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasManufactureDate()) {
        hash = (37 * hash) + MANUFACTURE_DATE_FIELD_NUMBER;
        hash = (53 * hash) + getManufactureDate().hashCode();
      }
      hash = (37 * hash) + SERIAL_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + getSerialNumber().hashCode();
      if (getFirmwaresCount() > 0) {
        hash = (37 * hash) + FIRMWARES_FIELD_NUMBER;
        hash = (53 * hash) + getFirmwaresList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Metadata of a circuit board present on a device.
     * </pre>
     *
     * Protobuf type {@code salto.nebula.type.DeviceMetadata.CircuitBoard}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:salto.nebula.type.DeviceMetadata.CircuitBoard)
        com.saltoapis.nebula.type.DeviceMetadata.CircuitBoardOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_CircuitBoard_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_CircuitBoard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.class, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder.class);
      }

      // Construct using com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getManufactureDateFieldBuilder();
          getFirmwaresFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        manufactureDate_ = null;
        if (manufactureDateBuilder_ != null) {
          manufactureDateBuilder_.dispose();
          manufactureDateBuilder_ = null;
        }
        serialNumber_ = "";
        if (firmwaresBuilder_ == null) {
          firmwares_ = java.util.Collections.emptyList();
        } else {
          firmwares_ = null;
          firmwaresBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_CircuitBoard_descriptor;
      }

      @java.lang.Override
      public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard getDefaultInstanceForType() {
        return com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.getDefaultInstance();
      }

      @java.lang.Override
      public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard build() {
        com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard buildPartial() {
        com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard result = new com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard result) {
        if (firmwaresBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            firmwares_ = java.util.Collections.unmodifiableList(firmwares_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.firmwares_ = firmwares_;
        } else {
          result.firmwares_ = firmwaresBuilder_.build();
        }
      }

      private void buildPartial0(com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.manufactureDate_ = manufactureDateBuilder_ == null
              ? manufactureDate_
              : manufactureDateBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.serialNumber_ = serialNumber_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard) {
          return mergeFrom((com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard other) {
        if (other == com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.getDefaultInstance()) return this;
        if (other.hasManufactureDate()) {
          mergeManufactureDate(other.getManufactureDate());
        }
        if (!other.getSerialNumber().isEmpty()) {
          serialNumber_ = other.serialNumber_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (firmwaresBuilder_ == null) {
          if (!other.firmwares_.isEmpty()) {
            if (firmwares_.isEmpty()) {
              firmwares_ = other.firmwares_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureFirmwaresIsMutable();
              firmwares_.addAll(other.firmwares_);
            }
            onChanged();
          }
        } else {
          if (!other.firmwares_.isEmpty()) {
            if (firmwaresBuilder_.isEmpty()) {
              firmwaresBuilder_.dispose();
              firmwaresBuilder_ = null;
              firmwares_ = other.firmwares_;
              bitField0_ = (bitField0_ & ~0x00000004);
              firmwaresBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFirmwaresFieldBuilder() : null;
            } else {
              firmwaresBuilder_.addAllMessages(other.firmwares_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 18: {
                input.readMessage(
                    getManufactureDateFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 18
              case 26: {
                serialNumber_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 26
              case 34: {
                com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware m =
                    input.readMessage(
                        com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.parser(),
                        extensionRegistry);
                if (firmwaresBuilder_ == null) {
                  ensureFirmwaresIsMutable();
                  firmwares_.add(m);
                } else {
                  firmwaresBuilder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.saltoapis.type.Date manufactureDate_;
      private com.google.protobuf.SingleFieldBuilder<
          com.saltoapis.type.Date, com.saltoapis.type.Date.Builder, com.saltoapis.type.DateOrBuilder> manufactureDateBuilder_;
      /**
       * <pre>
       * Date manufactured
       * </pre>
       *
       * <code>.salto.type.Date manufacture_date = 2;</code>
       * @return Whether the manufactureDate field is set.
       */
      public boolean hasManufactureDate() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Date manufactured
       * </pre>
       *
       * <code>.salto.type.Date manufacture_date = 2;</code>
       * @return The manufactureDate.
       */
      public com.saltoapis.type.Date getManufactureDate() {
        if (manufactureDateBuilder_ == null) {
          return manufactureDate_ == null ? com.saltoapis.type.Date.getDefaultInstance() : manufactureDate_;
        } else {
          return manufactureDateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Date manufactured
       * </pre>
       *
       * <code>.salto.type.Date manufacture_date = 2;</code>
       */
      public Builder setManufactureDate(com.saltoapis.type.Date value) {
        if (manufactureDateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          manufactureDate_ = value;
        } else {
          manufactureDateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Date manufactured
       * </pre>
       *
       * <code>.salto.type.Date manufacture_date = 2;</code>
       */
      public Builder setManufactureDate(
          com.saltoapis.type.Date.Builder builderForValue) {
        if (manufactureDateBuilder_ == null) {
          manufactureDate_ = builderForValue.build();
        } else {
          manufactureDateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Date manufactured
       * </pre>
       *
       * <code>.salto.type.Date manufacture_date = 2;</code>
       */
      public Builder mergeManufactureDate(com.saltoapis.type.Date value) {
        if (manufactureDateBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            manufactureDate_ != null &&
            manufactureDate_ != com.saltoapis.type.Date.getDefaultInstance()) {
            getManufactureDateBuilder().mergeFrom(value);
          } else {
            manufactureDate_ = value;
          }
        } else {
          manufactureDateBuilder_.mergeFrom(value);
        }
        if (manufactureDate_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Date manufactured
       * </pre>
       *
       * <code>.salto.type.Date manufacture_date = 2;</code>
       */
      public Builder clearManufactureDate() {
        bitField0_ = (bitField0_ & ~0x00000001);
        manufactureDate_ = null;
        if (manufactureDateBuilder_ != null) {
          manufactureDateBuilder_.dispose();
          manufactureDateBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Date manufactured
       * </pre>
       *
       * <code>.salto.type.Date manufacture_date = 2;</code>
       */
      public com.saltoapis.type.Date.Builder getManufactureDateBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getManufactureDateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Date manufactured
       * </pre>
       *
       * <code>.salto.type.Date manufacture_date = 2;</code>
       */
      public com.saltoapis.type.DateOrBuilder getManufactureDateOrBuilder() {
        if (manufactureDateBuilder_ != null) {
          return manufactureDateBuilder_.getMessageOrBuilder();
        } else {
          return manufactureDate_ == null ?
              com.saltoapis.type.Date.getDefaultInstance() : manufactureDate_;
        }
      }
      /**
       * <pre>
       * Date manufactured
       * </pre>
       *
       * <code>.salto.type.Date manufacture_date = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.saltoapis.type.Date, com.saltoapis.type.Date.Builder, com.saltoapis.type.DateOrBuilder> 
          getManufactureDateFieldBuilder() {
        if (manufactureDateBuilder_ == null) {
          manufactureDateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.saltoapis.type.Date, com.saltoapis.type.Date.Builder, com.saltoapis.type.DateOrBuilder>(
                  getManufactureDate(),
                  getParentForChildren(),
                  isClean());
          manufactureDate_ = null;
        }
        return manufactureDateBuilder_;
      }

      private java.lang.Object serialNumber_ = "";
      /**
       * <pre>
       * Hardware serial number, for example, `2.000.0020`
       * </pre>
       *
       * <code>string serial_number = 3;</code>
       * @return The serialNumber.
       */
      public java.lang.String getSerialNumber() {
        java.lang.Object ref = serialNumber_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          serialNumber_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Hardware serial number, for example, `2.000.0020`
       * </pre>
       *
       * <code>string serial_number = 3;</code>
       * @return The bytes for serialNumber.
       */
      public com.google.protobuf.ByteString
          getSerialNumberBytes() {
        java.lang.Object ref = serialNumber_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          serialNumber_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Hardware serial number, for example, `2.000.0020`
       * </pre>
       *
       * <code>string serial_number = 3;</code>
       * @param value The serialNumber to set.
       * @return This builder for chaining.
       */
      public Builder setSerialNumber(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        serialNumber_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Hardware serial number, for example, `2.000.0020`
       * </pre>
       *
       * <code>string serial_number = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSerialNumber() {
        serialNumber_ = getDefaultInstance().getSerialNumber();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Hardware serial number, for example, `2.000.0020`
       * </pre>
       *
       * <code>string serial_number = 3;</code>
       * @param value The bytes for serialNumber to set.
       * @return This builder for chaining.
       */
      public Builder setSerialNumberBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        serialNumber_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.util.List<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware> firmwares_ =
        java.util.Collections.emptyList();
      private void ensureFirmwaresIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          firmwares_ = new java.util.ArrayList<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware>(firmwares_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.FirmwareOrBuilder> firmwaresBuilder_;

      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public java.util.List<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware> getFirmwaresList() {
        if (firmwaresBuilder_ == null) {
          return java.util.Collections.unmodifiableList(firmwares_);
        } else {
          return firmwaresBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public int getFirmwaresCount() {
        if (firmwaresBuilder_ == null) {
          return firmwares_.size();
        } else {
          return firmwaresBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware getFirmwares(int index) {
        if (firmwaresBuilder_ == null) {
          return firmwares_.get(index);
        } else {
          return firmwaresBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public Builder setFirmwares(
          int index, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware value) {
        if (firmwaresBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFirmwaresIsMutable();
          firmwares_.set(index, value);
          onChanged();
        } else {
          firmwaresBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public Builder setFirmwares(
          int index, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder builderForValue) {
        if (firmwaresBuilder_ == null) {
          ensureFirmwaresIsMutable();
          firmwares_.set(index, builderForValue.build());
          onChanged();
        } else {
          firmwaresBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public Builder addFirmwares(com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware value) {
        if (firmwaresBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFirmwaresIsMutable();
          firmwares_.add(value);
          onChanged();
        } else {
          firmwaresBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public Builder addFirmwares(
          int index, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware value) {
        if (firmwaresBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFirmwaresIsMutable();
          firmwares_.add(index, value);
          onChanged();
        } else {
          firmwaresBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public Builder addFirmwares(
          com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder builderForValue) {
        if (firmwaresBuilder_ == null) {
          ensureFirmwaresIsMutable();
          firmwares_.add(builderForValue.build());
          onChanged();
        } else {
          firmwaresBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public Builder addFirmwares(
          int index, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder builderForValue) {
        if (firmwaresBuilder_ == null) {
          ensureFirmwaresIsMutable();
          firmwares_.add(index, builderForValue.build());
          onChanged();
        } else {
          firmwaresBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public Builder addAllFirmwares(
          java.lang.Iterable<? extends com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware> values) {
        if (firmwaresBuilder_ == null) {
          ensureFirmwaresIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, firmwares_);
          onChanged();
        } else {
          firmwaresBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public Builder clearFirmwares() {
        if (firmwaresBuilder_ == null) {
          firmwares_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          firmwaresBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public Builder removeFirmwares(int index) {
        if (firmwaresBuilder_ == null) {
          ensureFirmwaresIsMutable();
          firmwares_.remove(index);
          onChanged();
        } else {
          firmwaresBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder getFirmwaresBuilder(
          int index) {
        return getFirmwaresFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.FirmwareOrBuilder getFirmwaresOrBuilder(
          int index) {
        if (firmwaresBuilder_ == null) {
          return firmwares_.get(index);  } else {
          return firmwaresBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public java.util.List<? extends com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.FirmwareOrBuilder> 
           getFirmwaresOrBuilderList() {
        if (firmwaresBuilder_ != null) {
          return firmwaresBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(firmwares_);
        }
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder addFirmwaresBuilder() {
        return getFirmwaresFieldBuilder().addBuilder(
            com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.getDefaultInstance());
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder addFirmwaresBuilder(
          int index) {
        return getFirmwaresFieldBuilder().addBuilder(
            index, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.getDefaultInstance());
      }
      /**
       * <pre>
       * Firmwares present in this circuit board.
       * </pre>
       *
       * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard.Firmware firmwares = 4;</code>
       */
      public java.util.List<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder> 
           getFirmwaresBuilderList() {
        return getFirmwaresFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.FirmwareOrBuilder> 
          getFirmwaresFieldBuilder() {
        if (firmwaresBuilder_ == null) {
          firmwaresBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Firmware.Builder, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.FirmwareOrBuilder>(
                  firmwares_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          firmwares_ = null;
        }
        return firmwaresBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:salto.nebula.type.DeviceMetadata.CircuitBoard)
    }

    // @@protoc_insertion_point(class_scope:salto.nebula.type.DeviceMetadata.CircuitBoard)
    private static final com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard();
    }

    public static com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CircuitBoard>
        PARSER = new com.google.protobuf.AbstractParser<CircuitBoard>() {
      @java.lang.Override
      public CircuitBoard parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CircuitBoard> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CircuitBoard> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int CIRCUIT_BOARDS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard> circuitBoards_;
  /**
   * <pre>
   * Circuit boards present in this device.
   * </pre>
   *
   * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
   */
  @java.lang.Override
  public java.util.List<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard> getCircuitBoardsList() {
    return circuitBoards_;
  }
  /**
   * <pre>
   * Circuit boards present in this device.
   * </pre>
   *
   * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.saltoapis.nebula.type.DeviceMetadata.CircuitBoardOrBuilder> 
      getCircuitBoardsOrBuilderList() {
    return circuitBoards_;
  }
  /**
   * <pre>
   * Circuit boards present in this device.
   * </pre>
   *
   * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
   */
  @java.lang.Override
  public int getCircuitBoardsCount() {
    return circuitBoards_.size();
  }
  /**
   * <pre>
   * Circuit boards present in this device.
   * </pre>
   *
   * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
   */
  @java.lang.Override
  public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard getCircuitBoards(int index) {
    return circuitBoards_.get(index);
  }
  /**
   * <pre>
   * Circuit boards present in this device.
   * </pre>
   *
   * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
   */
  @java.lang.Override
  public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoardOrBuilder getCircuitBoardsOrBuilder(
      int index) {
    return circuitBoards_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < circuitBoards_.size(); i++) {
      output.writeMessage(1, circuitBoards_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < circuitBoards_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, circuitBoards_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.saltoapis.nebula.type.DeviceMetadata)) {
      return super.equals(obj);
    }
    com.saltoapis.nebula.type.DeviceMetadata other = (com.saltoapis.nebula.type.DeviceMetadata) obj;

    if (!getCircuitBoardsList()
        .equals(other.getCircuitBoardsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getCircuitBoardsCount() > 0) {
      hash = (37 * hash) + CIRCUIT_BOARDS_FIELD_NUMBER;
      hash = (53 * hash) + getCircuitBoardsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.saltoapis.nebula.type.DeviceMetadata parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.saltoapis.nebula.type.DeviceMetadata parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.saltoapis.nebula.type.DeviceMetadata parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.saltoapis.nebula.type.DeviceMetadata parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.saltoapis.nebula.type.DeviceMetadata parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.saltoapis.nebula.type.DeviceMetadata parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.saltoapis.nebula.type.DeviceMetadata parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.saltoapis.nebula.type.DeviceMetadata parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.saltoapis.nebula.type.DeviceMetadata parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.saltoapis.nebula.type.DeviceMetadata parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.saltoapis.nebula.type.DeviceMetadata parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.saltoapis.nebula.type.DeviceMetadata parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.saltoapis.nebula.type.DeviceMetadata prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Metadata contains information about a device. Most metadata is immutable.
   * </pre>
   *
   * Protobuf type {@code salto.nebula.type.DeviceMetadata}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:salto.nebula.type.DeviceMetadata)
      com.saltoapis.nebula.type.DeviceMetadataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.saltoapis.nebula.type.DeviceMetadata.class, com.saltoapis.nebula.type.DeviceMetadata.Builder.class);
    }

    // Construct using com.saltoapis.nebula.type.DeviceMetadata.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (circuitBoardsBuilder_ == null) {
        circuitBoards_ = java.util.Collections.emptyList();
      } else {
        circuitBoards_ = null;
        circuitBoardsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.saltoapis.nebula.type.DeviceMetadataProto.internal_static_salto_nebula_type_DeviceMetadata_descriptor;
    }

    @java.lang.Override
    public com.saltoapis.nebula.type.DeviceMetadata getDefaultInstanceForType() {
      return com.saltoapis.nebula.type.DeviceMetadata.getDefaultInstance();
    }

    @java.lang.Override
    public com.saltoapis.nebula.type.DeviceMetadata build() {
      com.saltoapis.nebula.type.DeviceMetadata result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.saltoapis.nebula.type.DeviceMetadata buildPartial() {
      com.saltoapis.nebula.type.DeviceMetadata result = new com.saltoapis.nebula.type.DeviceMetadata(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.saltoapis.nebula.type.DeviceMetadata result) {
      if (circuitBoardsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          circuitBoards_ = java.util.Collections.unmodifiableList(circuitBoards_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.circuitBoards_ = circuitBoards_;
      } else {
        result.circuitBoards_ = circuitBoardsBuilder_.build();
      }
    }

    private void buildPartial0(com.saltoapis.nebula.type.DeviceMetadata result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.saltoapis.nebula.type.DeviceMetadata) {
        return mergeFrom((com.saltoapis.nebula.type.DeviceMetadata)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.saltoapis.nebula.type.DeviceMetadata other) {
      if (other == com.saltoapis.nebula.type.DeviceMetadata.getDefaultInstance()) return this;
      if (circuitBoardsBuilder_ == null) {
        if (!other.circuitBoards_.isEmpty()) {
          if (circuitBoards_.isEmpty()) {
            circuitBoards_ = other.circuitBoards_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCircuitBoardsIsMutable();
            circuitBoards_.addAll(other.circuitBoards_);
          }
          onChanged();
        }
      } else {
        if (!other.circuitBoards_.isEmpty()) {
          if (circuitBoardsBuilder_.isEmpty()) {
            circuitBoardsBuilder_.dispose();
            circuitBoardsBuilder_ = null;
            circuitBoards_ = other.circuitBoards_;
            bitField0_ = (bitField0_ & ~0x00000001);
            circuitBoardsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getCircuitBoardsFieldBuilder() : null;
          } else {
            circuitBoardsBuilder_.addAllMessages(other.circuitBoards_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard m =
                  input.readMessage(
                      com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.parser(),
                      extensionRegistry);
              if (circuitBoardsBuilder_ == null) {
                ensureCircuitBoardsIsMutable();
                circuitBoards_.add(m);
              } else {
                circuitBoardsBuilder_.addMessage(m);
              }
              break;
            } // case 10
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard> circuitBoards_ =
      java.util.Collections.emptyList();
    private void ensureCircuitBoardsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        circuitBoards_ = new java.util.ArrayList<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard>(circuitBoards_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoardOrBuilder> circuitBoardsBuilder_;

    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public java.util.List<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard> getCircuitBoardsList() {
      if (circuitBoardsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(circuitBoards_);
      } else {
        return circuitBoardsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public int getCircuitBoardsCount() {
      if (circuitBoardsBuilder_ == null) {
        return circuitBoards_.size();
      } else {
        return circuitBoardsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard getCircuitBoards(int index) {
      if (circuitBoardsBuilder_ == null) {
        return circuitBoards_.get(index);
      } else {
        return circuitBoardsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public Builder setCircuitBoards(
        int index, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard value) {
      if (circuitBoardsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCircuitBoardsIsMutable();
        circuitBoards_.set(index, value);
        onChanged();
      } else {
        circuitBoardsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public Builder setCircuitBoards(
        int index, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder builderForValue) {
      if (circuitBoardsBuilder_ == null) {
        ensureCircuitBoardsIsMutable();
        circuitBoards_.set(index, builderForValue.build());
        onChanged();
      } else {
        circuitBoardsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public Builder addCircuitBoards(com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard value) {
      if (circuitBoardsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCircuitBoardsIsMutable();
        circuitBoards_.add(value);
        onChanged();
      } else {
        circuitBoardsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public Builder addCircuitBoards(
        int index, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard value) {
      if (circuitBoardsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCircuitBoardsIsMutable();
        circuitBoards_.add(index, value);
        onChanged();
      } else {
        circuitBoardsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public Builder addCircuitBoards(
        com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder builderForValue) {
      if (circuitBoardsBuilder_ == null) {
        ensureCircuitBoardsIsMutable();
        circuitBoards_.add(builderForValue.build());
        onChanged();
      } else {
        circuitBoardsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public Builder addCircuitBoards(
        int index, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder builderForValue) {
      if (circuitBoardsBuilder_ == null) {
        ensureCircuitBoardsIsMutable();
        circuitBoards_.add(index, builderForValue.build());
        onChanged();
      } else {
        circuitBoardsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public Builder addAllCircuitBoards(
        java.lang.Iterable<? extends com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard> values) {
      if (circuitBoardsBuilder_ == null) {
        ensureCircuitBoardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, circuitBoards_);
        onChanged();
      } else {
        circuitBoardsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public Builder clearCircuitBoards() {
      if (circuitBoardsBuilder_ == null) {
        circuitBoards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        circuitBoardsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public Builder removeCircuitBoards(int index) {
      if (circuitBoardsBuilder_ == null) {
        ensureCircuitBoardsIsMutable();
        circuitBoards_.remove(index);
        onChanged();
      } else {
        circuitBoardsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder getCircuitBoardsBuilder(
        int index) {
      return getCircuitBoardsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoardOrBuilder getCircuitBoardsOrBuilder(
        int index) {
      if (circuitBoardsBuilder_ == null) {
        return circuitBoards_.get(index);  } else {
        return circuitBoardsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public java.util.List<? extends com.saltoapis.nebula.type.DeviceMetadata.CircuitBoardOrBuilder> 
         getCircuitBoardsOrBuilderList() {
      if (circuitBoardsBuilder_ != null) {
        return circuitBoardsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(circuitBoards_);
      }
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder addCircuitBoardsBuilder() {
      return getCircuitBoardsFieldBuilder().addBuilder(
          com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.getDefaultInstance());
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder addCircuitBoardsBuilder(
        int index) {
      return getCircuitBoardsFieldBuilder().addBuilder(
          index, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.getDefaultInstance());
    }
    /**
     * <pre>
     * Circuit boards present in this device.
     * </pre>
     *
     * <code>repeated .salto.nebula.type.DeviceMetadata.CircuitBoard circuit_boards = 1;</code>
     */
    public java.util.List<com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder> 
         getCircuitBoardsBuilderList() {
      return getCircuitBoardsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoardOrBuilder> 
        getCircuitBoardsFieldBuilder() {
      if (circuitBoardsBuilder_ == null) {
        circuitBoardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoard.Builder, com.saltoapis.nebula.type.DeviceMetadata.CircuitBoardOrBuilder>(
                circuitBoards_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        circuitBoards_ = null;
      }
      return circuitBoardsBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:salto.nebula.type.DeviceMetadata)
  }

  // @@protoc_insertion_point(class_scope:salto.nebula.type.DeviceMetadata)
  private static final com.saltoapis.nebula.type.DeviceMetadata DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.saltoapis.nebula.type.DeviceMetadata();
  }

  public static com.saltoapis.nebula.type.DeviceMetadata getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DeviceMetadata>
      PARSER = new com.google.protobuf.AbstractParser<DeviceMetadata>() {
    @java.lang.Override
    public DeviceMetadata parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DeviceMetadata> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DeviceMetadata> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.saltoapis.nebula.type.DeviceMetadata getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

