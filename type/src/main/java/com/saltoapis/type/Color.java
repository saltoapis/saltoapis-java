// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: salto/type/color.proto

// Protobuf Java Version: 3.25.1
package com.saltoapis.type;

/**
 * <pre>
 * Represents a color in the RGBA color space.
 * By default, applications should assume the sRGB color space.
 *
 * When color equality needs to be decided, implementations, unless
 * documented otherwise, treat two colors as equal if all their red,
 * green, blue, and alpha values each differ by at most 1e-5.
 * </pre>
 *
 * Protobuf type {@code salto.type.Color}
 */
public  final class Color extends
    com.google.protobuf.GeneratedMessageLite<
        Color, Color.Builder> implements
    // @@protoc_insertion_point(message_implements:salto.type.Color)
    ColorOrBuilder {
  private Color() {
  }
  private int bitField0_;
  public static final int RED_FIELD_NUMBER = 1;
  private float red_;
  /**
   * <pre>
   * The amount of red in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>float red = 1;</code>
   * @return The red.
   */
  @java.lang.Override
  public float getRed() {
    return red_;
  }
  /**
   * <pre>
   * The amount of red in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>float red = 1;</code>
   * @param value The red to set.
   */
  private void setRed(float value) {
    
    red_ = value;
  }
  /**
   * <pre>
   * The amount of red in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>float red = 1;</code>
   */
  private void clearRed() {

    red_ = 0F;
  }

  public static final int GREEN_FIELD_NUMBER = 2;
  private float green_;
  /**
   * <pre>
   * The amount of green in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>float green = 2;</code>
   * @return The green.
   */
  @java.lang.Override
  public float getGreen() {
    return green_;
  }
  /**
   * <pre>
   * The amount of green in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>float green = 2;</code>
   * @param value The green to set.
   */
  private void setGreen(float value) {
    
    green_ = value;
  }
  /**
   * <pre>
   * The amount of green in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>float green = 2;</code>
   */
  private void clearGreen() {

    green_ = 0F;
  }

  public static final int BLUE_FIELD_NUMBER = 3;
  private float blue_;
  /**
   * <pre>
   * The amount of blue in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>float blue = 3;</code>
   * @return The blue.
   */
  @java.lang.Override
  public float getBlue() {
    return blue_;
  }
  /**
   * <pre>
   * The amount of blue in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>float blue = 3;</code>
   * @param value The blue to set.
   */
  private void setBlue(float value) {
    
    blue_ = value;
  }
  /**
   * <pre>
   * The amount of blue in the color as a value in the interval [0, 1].
   * </pre>
   *
   * <code>float blue = 3;</code>
   */
  private void clearBlue() {

    blue_ = 0F;
  }

  public static final int ALPHA_FIELD_NUMBER = 4;
  private float alpha_;
  /**
   * <pre>
   * The fraction of this color that should be applied to the pixel. That is,
   * the final pixel color is defined by the equation:
   *
   *   `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
   *
   * This means that a value of 1.0 corresponds to a solid color, whereas
   * a value of 0.0 corresponds to a completely transparent color.
   * If omitted, this color object is rendered as a solid color
   * (as if the alpha value had been explicitly given a value of 1.0).
   * </pre>
   *
   * <code>optional float alpha = 4;</code>
   * @return Whether the alpha field is set.
   */
  @java.lang.Override
  public boolean hasAlpha() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The fraction of this color that should be applied to the pixel. That is,
   * the final pixel color is defined by the equation:
   *
   *   `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
   *
   * This means that a value of 1.0 corresponds to a solid color, whereas
   * a value of 0.0 corresponds to a completely transparent color.
   * If omitted, this color object is rendered as a solid color
   * (as if the alpha value had been explicitly given a value of 1.0).
   * </pre>
   *
   * <code>optional float alpha = 4;</code>
   * @return The alpha.
   */
  @java.lang.Override
  public float getAlpha() {
    return alpha_;
  }
  /**
   * <pre>
   * The fraction of this color that should be applied to the pixel. That is,
   * the final pixel color is defined by the equation:
   *
   *   `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
   *
   * This means that a value of 1.0 corresponds to a solid color, whereas
   * a value of 0.0 corresponds to a completely transparent color.
   * If omitted, this color object is rendered as a solid color
   * (as if the alpha value had been explicitly given a value of 1.0).
   * </pre>
   *
   * <code>optional float alpha = 4;</code>
   * @param value The alpha to set.
   */
  private void setAlpha(float value) {
    bitField0_ |= 0x00000001;
    alpha_ = value;
  }
  /**
   * <pre>
   * The fraction of this color that should be applied to the pixel. That is,
   * the final pixel color is defined by the equation:
   *
   *   `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
   *
   * This means that a value of 1.0 corresponds to a solid color, whereas
   * a value of 0.0 corresponds to a completely transparent color.
   * If omitted, this color object is rendered as a solid color
   * (as if the alpha value had been explicitly given a value of 1.0).
   * </pre>
   *
   * <code>optional float alpha = 4;</code>
   */
  private void clearAlpha() {
    bitField0_ = (bitField0_ & ~0x00000001);
    alpha_ = 0F;
  }

  public static com.saltoapis.type.Color parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.saltoapis.type.Color parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.saltoapis.type.Color parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.saltoapis.type.Color parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.saltoapis.type.Color parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.saltoapis.type.Color parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.saltoapis.type.Color parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.saltoapis.type.Color parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.saltoapis.type.Color parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.saltoapis.type.Color parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.saltoapis.type.Color parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.saltoapis.type.Color parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.saltoapis.type.Color prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Represents a color in the RGBA color space.
   * By default, applications should assume the sRGB color space.
   *
   * When color equality needs to be decided, implementations, unless
   * documented otherwise, treat two colors as equal if all their red,
   * green, blue, and alpha values each differ by at most 1e-5.
   * </pre>
   *
   * Protobuf type {@code salto.type.Color}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.saltoapis.type.Color, Builder> implements
      // @@protoc_insertion_point(builder_implements:salto.type.Color)
      com.saltoapis.type.ColorOrBuilder {
    // Construct using com.saltoapis.type.Color.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The amount of red in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>float red = 1;</code>
     * @return The red.
     */
    @java.lang.Override
    public float getRed() {
      return instance.getRed();
    }
    /**
     * <pre>
     * The amount of red in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>float red = 1;</code>
     * @param value The red to set.
     * @return This builder for chaining.
     */
    public Builder setRed(float value) {
      copyOnWrite();
      instance.setRed(value);
      return this;
    }
    /**
     * <pre>
     * The amount of red in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>float red = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearRed() {
      copyOnWrite();
      instance.clearRed();
      return this;
    }

    /**
     * <pre>
     * The amount of green in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>float green = 2;</code>
     * @return The green.
     */
    @java.lang.Override
    public float getGreen() {
      return instance.getGreen();
    }
    /**
     * <pre>
     * The amount of green in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>float green = 2;</code>
     * @param value The green to set.
     * @return This builder for chaining.
     */
    public Builder setGreen(float value) {
      copyOnWrite();
      instance.setGreen(value);
      return this;
    }
    /**
     * <pre>
     * The amount of green in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>float green = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearGreen() {
      copyOnWrite();
      instance.clearGreen();
      return this;
    }

    /**
     * <pre>
     * The amount of blue in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>float blue = 3;</code>
     * @return The blue.
     */
    @java.lang.Override
    public float getBlue() {
      return instance.getBlue();
    }
    /**
     * <pre>
     * The amount of blue in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>float blue = 3;</code>
     * @param value The blue to set.
     * @return This builder for chaining.
     */
    public Builder setBlue(float value) {
      copyOnWrite();
      instance.setBlue(value);
      return this;
    }
    /**
     * <pre>
     * The amount of blue in the color as a value in the interval [0, 1].
     * </pre>
     *
     * <code>float blue = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearBlue() {
      copyOnWrite();
      instance.clearBlue();
      return this;
    }

    /**
     * <pre>
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *
     *   `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
     *
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color.
     * If omitted, this color object is rendered as a solid color
     * (as if the alpha value had been explicitly given a value of 1.0).
     * </pre>
     *
     * <code>optional float alpha = 4;</code>
     * @return Whether the alpha field is set.
     */
    @java.lang.Override
    public boolean hasAlpha() {
      return instance.hasAlpha();
    }
    /**
     * <pre>
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *
     *   `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
     *
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color.
     * If omitted, this color object is rendered as a solid color
     * (as if the alpha value had been explicitly given a value of 1.0).
     * </pre>
     *
     * <code>optional float alpha = 4;</code>
     * @return The alpha.
     */
    @java.lang.Override
    public float getAlpha() {
      return instance.getAlpha();
    }
    /**
     * <pre>
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *
     *   `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
     *
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color.
     * If omitted, this color object is rendered as a solid color
     * (as if the alpha value had been explicitly given a value of 1.0).
     * </pre>
     *
     * <code>optional float alpha = 4;</code>
     * @param value The alpha to set.
     * @return This builder for chaining.
     */
    public Builder setAlpha(float value) {
      copyOnWrite();
      instance.setAlpha(value);
      return this;
    }
    /**
     * <pre>
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *
     *   `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
     *
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color.
     * If omitted, this color object is rendered as a solid color
     * (as if the alpha value had been explicitly given a value of 1.0).
     * </pre>
     *
     * <code>optional float alpha = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearAlpha() {
      copyOnWrite();
      instance.clearAlpha();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:salto.type.Color)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.saltoapis.type.Color();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "red_",
            "green_",
            "blue_",
            "alpha_",
          };
          java.lang.String info =
              "\u0000\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u0001\u0002\u0001" +
              "\u0003\u0001\u0004\u1001\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.saltoapis.type.Color> parser = PARSER;
        if (parser == null) {
          synchronized (com.saltoapis.type.Color.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.saltoapis.type.Color>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:salto.type.Color)
  private static final com.saltoapis.type.Color DEFAULT_INSTANCE;
  static {
    Color defaultInstance = new Color();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Color.class, defaultInstance);
  }

  public static com.saltoapis.type.Color getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Color> PARSER;

  public static com.google.protobuf.Parser<Color> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

