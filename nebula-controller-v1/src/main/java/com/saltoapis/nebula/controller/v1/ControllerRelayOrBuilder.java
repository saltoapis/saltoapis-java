// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: salto/nebula/controller/v1/controller.proto
// Protobuf Java Version: 4.29.2

package com.saltoapis.nebula.controller.v1;

public interface ControllerRelayOrBuilder extends
    // @@protoc_insertion_point(interface_extends:salto.nebula.controller.v1.ControllerRelay)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Output only. Resource name of the controller relay. It must have the format of
   * `installations/&#42;&#47;controllers/&#42;&#47;relays/&#42;`. For example:
   * `installations/surelock-homes-hq/controller/dancing-men/relays/first-floor`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Output only. Resource name of the controller relay. It must have the format of
   * `installations/&#42;&#47;controllers/&#42;&#47;relays/&#42;`. For example:
   * `installations/surelock-homes-hq/controller/dancing-men/relays/first-floor`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Extension board address. Values range from 0-15, allowing for up to 16 boards in the system.
   * This field is not applicable for master boards or wall reader extension boards.
   * </pre>
   *
   * <code>optional int32 dip_switch = 2;</code>
   * @return Whether the dipSwitch field is set.
   */
  boolean hasDipSwitch();
  /**
   * <pre>
   * Extension board address. Values range from 0-15, allowing for up to 16 boards in the system.
   * This field is not applicable for master boards or wall reader extension boards.
   * </pre>
   *
   * <code>optional int32 dip_switch = 2;</code>
   * @return The dipSwitch.
   */
  int getDipSwitch();

  /**
   * <pre>
   * Identifies the specific controller relay on the board (1-4). Board type determines
   * which controller relay IDs are actually available for configuration and use.
   * </pre>
   *
   * <code>int32 relay_id = 3;</code>
   * @return The relayId.
   */
  int getRelayId();

  /**
   * <pre>
   * Destination output configuration for this controller relay.
   * </pre>
   *
   * <code>.salto.nebula.controller.v1.ControllerRelay.DestinationOutput destination_output = 4;</code>
   * @return Whether the destinationOutput field is set.
   */
  boolean hasDestinationOutput();
  /**
   * <pre>
   * Destination output configuration for this controller relay.
   * </pre>
   *
   * <code>.salto.nebula.controller.v1.ControllerRelay.DestinationOutput destination_output = 4;</code>
   * @return The destinationOutput.
   */
  com.saltoapis.nebula.controller.v1.ControllerRelay.DestinationOutput getDestinationOutput();
  /**
   * <pre>
   * Destination output configuration for this controller relay.
   * </pre>
   *
   * <code>.salto.nebula.controller.v1.ControllerRelay.DestinationOutput destination_output = 4;</code>
   */
  com.saltoapis.nebula.controller.v1.ControllerRelay.DestinationOutputOrBuilder getDestinationOutputOrBuilder();

  /**
   * <pre>
   * Strike configuration for this controller relay.
   * </pre>
   *
   * <code>.salto.nebula.controller.v1.ControllerRelay.Strike strike = 5;</code>
   * @return Whether the strike field is set.
   */
  boolean hasStrike();
  /**
   * <pre>
   * Strike configuration for this controller relay.
   * </pre>
   *
   * <code>.salto.nebula.controller.v1.ControllerRelay.Strike strike = 5;</code>
   * @return The strike.
   */
  com.saltoapis.nebula.controller.v1.ControllerRelay.Strike getStrike();
  /**
   * <pre>
   * Strike configuration for this controller relay.
   * </pre>
   *
   * <code>.salto.nebula.controller.v1.ControllerRelay.Strike strike = 5;</code>
   */
  com.saltoapis.nebula.controller.v1.ControllerRelay.StrikeOrBuilder getStrikeOrBuilder();

  com.saltoapis.nebula.controller.v1.ControllerRelay.TypeCase getTypeCase();
}
